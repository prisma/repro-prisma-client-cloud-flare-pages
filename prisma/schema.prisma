generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgres"
  url       = env("DATABASE_URL_PROXY")
  directUrl = env("DATABASE_URL_DIRECT")
}

//
//
// --------------------------------------------------------------------------------------
// User
// --------------------------------------------------------------------------------------
//
//

model User {
  // -----------
  // Boilerplate
  // -----------
  kind               UserModelKind            @default(User)
  id                 String                   @id @default(cuid())
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  // ------
  // Domain
  // ------
  deactivated        Boolean?
  deactivatedAt      DateTime?
  displayName        String
  email              String                   @unique
  image              String?
  stripeCustomerId   String                   @unique
  // ---------
  // Relations
  // ---------
  accounts           Account[]
  projectMemberships OrganizationMembership[]
  notifications      Notification[]
  auth0UserId        String?                  @unique
}

enum UserModelKind {
  User
}

//
//
// --------------------------------------------------------------------------------------
// Account
// --------------------------------------------------------------------------------------
//
//

model Account {
  // -----------
  // Boilerplate
  // -----------
  kind               AccountModelKind    @default(Account)
  id                 String              @id @default(cuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  // ------
  // Domain
  // ------
  providerName       AccountProviderName
  providerKind       AccountProviderKind
  providerAccountId  String
  refreshToken       String?
  accessToken        String
  accessTokenExpires DateTime?
  // ---------
  // Relations
  // ---------
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String

  @@unique([providerKind, providerAccountId])
}

enum AccountModelKind {
  Account
}

enum AccountProviderName {
  github
}

enum AccountProviderKind {
  oauth
}

//
//
// --------------------------------------------------------------------------------------
// Organization
// --------------------------------------------------------------------------------------
//
//

model Organization {
  // -----------
  // Boilerplate
  // -----------
  kind        OrganizationModelKind    @default(Organization)
  id          String                   @id @default(cuid())
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  // ------
  // Domain
  // ------
  displayName String
  // ---------
  // Relations
  // ---------
  members     OrganizationMembership[]
  projects    Project[]
}

enum OrganizationModelKind {
  Organization
}

//
//
// --------------------------------------------------------------------------------------
// OrganizationMembership
// --------------------------------------------------------------------------------------
//
//

model OrganizationMembership {
  // -----------
  // Boilerplate
  // -----------
  kind           OrganizationMembershipModelKind @default(OrganizationMembership)
  id             String                          @id @default(cuid())
  createdAt      DateTime                        @default(now())
  updatedAt      DateTime                        @updatedAt
  // ---------
  // Relations
  // ---------
  user           User                            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  Organization   Organization?                   @relation(fields: [organizationId], references: [id])
  organizationId String?
}

enum OrganizationMembershipModelKind {
  OrganizationMembership
}

//
//
// --------------------------------------------------------------------------------------
// Project
// --------------------------------------------------------------------------------------
//
//

model Project {
  // Boilerplate
  // -----------
  kind           ProjectModelKind @default(Project)
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  // ------
  // Domain
  // ------
  displayName    String
  deactivated    Boolean          @default(false)
  deactivatedOn  DateTime?
  // ---------
  // Relations
  // ---------
  environments   Environment[]
  Organization   Organization?    @relation(fields: [organizationId], references: [id])
  organizationId String?
}

enum ProjectModelKind {
  Project
}

//
//
// Environment
//
//

model Environment {
  // -----------
  // Boilerplate
  // -----------
  kind         EnvironmentModelKind @default(Environment)
  id           String               @id @default(cuid())
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  // ------
  // Domain
  // ------
  displayName  String
  isDefault    Boolean
  // ---------
  // Relations
  // ---------
  project      Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
  databaseLink DatabaseLink?
}

enum EnvironmentModelKind {
  Environment
}

//
//
// --------------------------------------------------------------------------------------
// DatabaseLink
// --------------------------------------------------------------------------------------
//
//

model DatabaseLink {
  // -----------
  // Boilerplate
  // -----------
  kind             DatabaseLinkModelKind @default(DatabaseLink)
  id               String                @id @default(cuid())
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  // ------
  // Domain
  // ------
  connectionString String
  // ---------
  // Relations
  // ---------
  environment      Environment           @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId    String                @unique
}

enum DatabaseLinkModelKind {
  DatabaseLink
}

//
//
// --------------------------------------------------------------------------------------
// Notification
// --------------------------------------------------------------------------------------
//
//

model Notification {
  // Boilerplate
  // -----------
  kind      NotificationModelKind @default(Notification)
  id        String                @id @default(cuid())
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  // Domain
  acknowledged Boolean                @default(false)
  variantTag   NotificationVariantTag

  // Relations
  // -----------
  recipient   User   @relation(references: [id], fields: [recipientId], onDelete: Cascade)
  recipientId String
}

enum NotificationModelKind {
  Notification
}

enum NotificationVariantTag {
  NotificationEarlyAdopterPlanRetired
}

enum NotificationEarlyAdopterPlanRetiredKind {
  NotificationEarlyAdopterPlanRetired
}
